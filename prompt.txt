당신은 Spring Boot 전문가입니다. 아래 명세·제약·파일구조를 100% 충족하는 코드를 생성하세요.
코드는 “여러 파일”로 내보내되, 각 파일은 경로 주석과 함께 하나의 코드블록으로 출력합니다. (예: // src/main/java/.../Book.java)

0) 공통 조건

JDK 17, Spring Boot 3.4.8, Spring Data JPA, Lombok, Bean Validation, H2(테스트) 또는 MariaDB(로컬) 사용

기본 패키지: com.rookies3.myspringbootlab

LAZY 기본, 즉시 로딩(EAGER) 금지

DTO 검증은 @Valid 사용, 전역 예외 처리 포함

BookDTO는 제공본 그대로 사용(수정 금지). 필요한 경우 별도의 Patch DTO만 추가

Hibernate6Module Bean 등록 및 default_batch_fetch_size=100 적용

API 응답은 DTO로 반환

1) 도메인: 1:1(Book ↔ BookDetail)
1-1. 엔티티

Book

필드: id(Long, PK), title, author, isbn, price(Integer), publishDate(LocalDate), bookDetail(BookDetail)

매핑: @OneToOne(mappedBy = "book", cascade = CascadeType.ALL, fetch = LAZY)

주인이 아님(mappedBy)

BookDetail

필드: id(Long, PK), description, language, pageCount(Integer), publisher, coverImageUrl, edition, book(Book)

매핑: @OneToOne(fetch = LAZY) @JoinColumn(name="book_id", unique = true)

관계의 주인(Owner), FK 소유

공통: Lombok(@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder) 사용

1-2. 레포지토리

BookRepository extends JpaRepository<Book, Long>

Optional<Book> findByIsbn(String isbn);

List<Book> findByAuthorContainingIgnoreCase(String author);

List<Book> findByTitleContainingIgnoreCase(String title);

@Query("select b from Book b join fetch b.bookDetail where b.id = :id") Optional<Book> findByIdWithBookDetail(@Param("id") Long id);

@Query("select b from Book b join fetch b.bookDetail where b.isbn = :isbn") Optional<Book> findByIsbnWithBookDetail(@Param("isbn") String isbn);

boolean existsByIsbn(String isbn);

BookDetailRepository extends JpaRepository<BookDetail, Long>

Optional<BookDetail> findByBookId(Long bookId);

@Query("select d from BookDetail d join fetch d.book where d.id = :id") Optional<BookDetail> findByIdWithBook(@Param("id") Long id);

List<BookDetail> findByPublisher(String publisher);

1-3. DTO (주의: BookDTO는 제공본 그대로 사용, 수정 금지)

새로 추가할 Patch 전용 DTO만 생성:

BookPatchDTO(모든 필드 null 허용): title, author, isbn, price, publishDate, detailRequest(BookDetailPatchDTO)

BookDetailPatchDTO: description, language, pageCount, publisher, coverImageUrl, edition (모두 null 허용)

검증: Patch는 부분수정이므로 필수 제약 없음(단, ISBN 바꾸려면 중복검사 로직 적용)

1-4. 서비스

BookService

List<BookDTO.Response> getAllBooks()

BookDTO.Response getBookById(Long id) → findByIdWithBookDetail 우선 사용, 없으면 BOOK_NOT_FOUND

BookDTO.Response getBookByIsbn(String isbn) → findByIsbnWithBookDetail

List<BookDTO.Response> getBooksByAuthor(String author)

List<BookDTO.Response> getBooksByTitle(String title)

BookDTO.Response createBook(BookDTO.Request request)

ISBN 중복: existsByIsbn(request.getIsbn()) → 중복 시 ISBN_DUPLICATE

양방향 세팅: detail.setBook(book) & book.setBookDetail(detail)

BookDTO.Response updateBook(Long id, BookDTO.Request request)(PUT 전체수정)

ISBN 변경 시만 중복검사:

if (!book.getIsbn().equals(request.getIsbn()) && bookRepository.existsByIsbn(request.getIsbn())) {
    throw new BusinessException(ErrorCode.ISBN_DUPLICATE, request.getIsbn());
}


bookDetail도 통째로 교체/갱신

PATCH 추가

BookDTO.Response patchBook(Long id, BookPatchDTO request)

전달된 필드만 반영(Null은 무시):

if (request.getTitle() != null) book.setTitle(request.getTitle());
// ...
if (request.getIsbn() != null && !book.getIsbn().equals(request.getIsbn())) {
    if (bookRepository.existsByIsbn(request.getIsbn())) throw new BusinessException(ErrorCode.ISBN_DUPLICATE, request.getIsbn());
    book.setIsbn(request.getIsbn());
}
// detail patch
if (request.getDetailRequest() != null) { ... }


BookDTO.Response patchBookDetail(Long id, BookDetailPatchDTO request)

book.getBookDetail() 없으면 생성해서 매핑(필요 시)

void deleteBook(Long id) → 존재 확인 후 삭제(연쇄로 BookDetail 제거)

1-5. 컨트롤러

@RestController @RequestMapping("/api/books") → BookController

GET /api/books → 전체

GET /api/books/{id} → 단건(ID)

GET /api/books/isbn/{isbn} → 단건(ISBN)

GET /api/books/search/author?author=... → 저자 검색

GET /api/books/search/title?title=... → 제목 검색

POST /api/books → 생성 (@Valid BookDTO.Request)

PUT /api/books/{id} → 전체수정 (@Valid BookDTO.Request)

PATCH /api/books/{id} → 부분수정 (BookPatchDTO)

PATCH /api/books/{id}/detail → 상세만 부분수정 (BookDetailPatchDTO)

DELETE /api/books/{id} → 삭제

1-6. 예외/검증/직렬화 설정

ErrorCode 예: BOOK_NOT_FOUND, ISBN_DUPLICATE, BOOK_DETAIL_NOT_FOUND, VALIDATION_ERROR

BusinessException extends RuntimeException (필드: ErrorCode code, String message, 선택적 args)

DefaultExceptionAdvice

@RestControllerAdvice, @ExceptionHandler(BusinessException.class)

Bean Validation 오류( MethodArgumentNotValidException )도 map해서 {status, message, timestamp, errors{...}} 형태로 응답

@Bean Hibernate6Module 등록:

@Bean
Hibernate6Module hibernate6Module() {
    Hibernate6Module m = new Hibernate6Module();
    m.configure(Hibernate6Module.Feature.FORCE_LAZY_LOADING, true);
    return m;
}


application.properties

spring.jpa.properties.hibernate.default_batch_fetch_size=100

2) 샘플 요청 (반드시 동작)

POST /api/books 두 건(Clean Code, Effective Java) — 본문은 아래 예시 그대로

GET /api/books/isbn/9780132350884

GET /api/books/search/author?author=Robert

PUT /api/books/{id} 전체수정

PATCH /api/books/{id} (제목만), (가격+detail.language만) 두 케이스

PATCH /api/books/{id}/detail (설명만)

DELETE /api/books/{id}

요청 JSON은 다음 예시 그대로 사용:

등록 2건, PUT 1건, PATCH 3건(본문은 과제 안내 예시 그대로)

3) 테스트(선택이지만 권장)

@DataJpaTest로 BookRepositoryTest 작성(제공 스니펫과 동등한 시나리오)

생성/조회/작가검색/findByIdWithBookDetail/findByBookId 검증

4) 산출물 구조(예시)

src/main/java/com/rookies3/myspringbootlab/entity/Book.java

src/main/java/com/rookies3/myspringbootlab/entity/BookDetail.java

src/main/java/com/rookies3/myspringbootlab/repository/BookRepository.java

src/main/java/com/rookies3/myspringbootlab/repository/BookDetailRepository.java

src/main/java/com/rookies3/myspringbootlab/controller/dto/BookDTO.java (제공본 그대로 복사, 수정 금지)

src/main/java/com/rookies3/myspringbootlab/controller/dto/BookPatchDTO.java

src/main/java/com/rookies3/myspringbootlab/service/BookService.java

src/main/java/com/rookies3/myspringbootlab/controller/BookController.java

src/main/java/com/rookies3/myspringbootlab/exception/ErrorCode.java

src/main/java/com/rookies3/myspringbootlab/exception/BusinessException.java

src/main/java/com/rookies3/myspringbootlab/exception/DefaultExceptionAdvice.java

src/main/java/com/rookies3/myspringbootlab/config/JacksonHibernateConfig.java

src/test/java/com/rookies3/myspringbootlab/repository/BookRepositoryTest.java(옵션)

5) 구현 세부 지침

양방향 연관관계 세팅 필수: detail.setBook(book), book.setBookDetail(detail)

PATCH는 null-무시 규칙으로, 제공 값만 업데이트

ISBN 변경 시에만 중복 체크(기존 값 유지면 체크 생략)

컨트롤러는 ResponseEntity로 감싸고 상태코드 적절히 사용(201 생성, 204 삭제)

DTO 변환은 BookDTO.Response.fromEntity(book)로 통일

조회시 N+1 없도록 JOIN FETCH 메서드 우선 사용