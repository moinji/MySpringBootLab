목표

Spring Boot 3.4.x 환경에서 도서(Book) CRUD REST API 완성.

기존 [실습2-1]의 Book 엔티티와 BookRepository를 그대로 사용.

404 처리:

getById → Optional.map().orElse(ResponseEntity.notFound()) 방식

getByIsbn → BusinessException + ErrorObject + DefaultExceptionAdvice 사용

프로젝트 조건

패키지 예시:

엔티티: mylab.book.entity.Book

리포지토리: mylab.book.repository.BookRepository (extends JpaRepository<Book, Long>)

메서드: Optional<Book> findByIsbn(String isbn), List<Book> findByAuthor(String author)

컨트롤러: mylab.book.api.BookRestController

DTO: mylab.book.api.dto.BookRequest, mylab.book.api.dto.BookResponse

전역 예외: mylab.common.error.BusinessException, ErrorObject, DefaultExceptionAdvice (이미 제공됨, 수정 금지)

의존성: web, data-jpa, validation, jackson-datatype-jsr310 (Boot 기본 포함), h2/mariadb(택1)

A) DTO 정의 (요청/응답)

BookRequest

필드: title(String), author(String), isbn(String), price(Integer), publishDate(LocalDate)

jakarta.validation 사용: @NotBlank(title, author, isbn), @Positive(price)

@JsonFormat(pattern="yyyy-MM-dd") on publishDate

BookResponse

필드: id(Long), title, author, isbn, price, publishDate(LocalDate)

엔티티 → 응답 변환용 of(Book) 정적 메서드 제공

B) BookRestController 작성 (mylab.book.api.BookRestController)

@RestController, @RequestMapping("/api/books")

@RequiredArgsConstructor 또는 생성자 주입 사용 (private final BookRepository bookRepository)

엔드포인트 (정확히 구현)

POST /api/books

@PostMapping

@Valid @RequestBody BookRequest req

중복 ISBN 체크(Optional): 존재하면 409(CONFLICT) 반환(선택)

Book 엔티티로 변환 후 save, Location: /api/books/{id} 헤더 세팅, ResponseEntity.created().body(BookResponse.of(saved)) 반환(201)

GET /api/books

@GetMapping

findAll() → List<BookResponse>로 변환하여 200 반환

GET /api/books/{id} (getBookById)

@GetMapping("/{id}")

메서드 시그니처: public ResponseEntity<BookResponse> getBookById(@PathVariable Long id)

findById(id).map(b -> ok(BookResponse.of(b))).orElse(notFound().build())

GET /api/books/isbn/{isbn} (getBookByIsbn)

@GetMapping("/isbn/{isbn}")

메서드 시그니처: public BookResponse getBookByIsbn(@PathVariable String isbn)

repo.findByIsbn(isbn).orElseThrow(() -> new BusinessException(
new ErrorObject("BOOK_NOT_FOUND", "해당 ISBN의 도서를 찾을 수 없습니다.", 404)))

반환은 BookResponse.of(book)

예외는 DefaultExceptionAdvice가 받아 404와 에러 바디를 내려주도록 함

PUT /api/books/{id}

@PutMapping("/{id}")

@Valid @RequestBody BookRequest req

findById(id)로 조회 → 없으면 notFound()

있으면 필드(title, author, isbn, price, publishDate) 업데이트 후 save → 200(OK)와 BookResponse

DELETE /api/books/{id}

@DeleteMapping("/{id}")

존재 확인 후 deleteById(id) → 204(No Content)

없으면 404(Not Found)

C) 매핑 로직(샘플)

BookRequest → Book: new Book(null, title, author, isbn, publishDate, price) 또는 setter 사용

Book → BookResponse: BookResponse.of(book)에서 필드 복사

D) 샘플 JSON (Postman 바디 Raw/JSON)
// 도서1
{
"title": "스프링 부트 입문",
"author": "홍길동",
"isbn": "9788956746425",
"price": 30000,
"publishDate": "2025-05-07"
}
// 도서2
{
"title": "JPA 프로그래밍",
"author": "박둘리",
"isbn": "9788956746432",
"price": 35000,
"publishDate": "2025-04-30"
}

E) Postman 빠른 검사 시나리오

POST /api/books (도서1) → 201 + Location

POST /api/books (도서2) → 201

GET /api/books → 200, 배열 크기 ≥ 2

GET /api/books/1 → 200 또는 생성된 id로 확인

GET /api/books/isbn/9788956746425 → 200(도서1)

GET /api/books/isbn/NOPE → DefaultExceptionAdvice 통해 404 + ErrorObject JSON

PUT /api/books/{id} (도서1의 가격 변경) → 200, price 변경 확인

DELETE /api/books/{id} (도서2) → 204

GET /api/books/{삭제한ID} → 404

F) 컨트롤러 코드 작성 규칙

import는 jakarta.* (validation), org.springframework.web.bind.annotation., org.springframework.http. 사용

날짜 역직렬화 위해 BookRequest.publishDate에 @JsonFormat(pattern="yyyy-MM-dd")

응답 상태코드/본문은 REST 원칙에 맞춤(201/200/204/404)

예외 메시지/코드는 ErrorObject 필드 명세에 맞춰 세팅(클래스 제공 형태에 맞게 생성자/빌더 사용)

NPE 방지: 모든 repo 호출은 Optional 안전 처리

G) 예시 파일 구성(원하면 그대로 생성)

src/main/java/mylab/book/api/BookRestController.java

src/main/java/mylab/book/api/dto/BookRequest.java

src/main/java/mylab/book/api/dto/BookResponse.java

H) 보너스(선택)

@Validated + PathVariable/RequestParam 검증

ETag/Last-Modified 헤더 추가

페이지네이션: GET /api/books?page=0&size=20